#+TITLE: Application
#+SETUPFILE: ./publish.setup

[[./index.org][Documentation index]]

* Initialization

** Redux store 

  Build actions.
  #+BEGIN_SRC js :tangle ../src/actions/index.js :mkdirp yes
  import * as tasks from "./tasks";

  export default {
    ...tasks,
  };
  #+END_SRC

  Build reducers.
  #+BEGIN_SRC js :tangle ../src/reducers/index.js :mkdirp yes
  import tasks from "./tasks";

  export default {
    tasks,
  };
  #+END_SRC

  Init redux dev tools extension if present.
  #+NAME: redux-devtools-init
  #+BEGIN_SRC js
  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
  #+END_SRC

  Create store.
  - enable Webpack hot module replacement for reducers. Redux does not implicitly reload reducers anymore. We need to explicitly reload them when they change.
  #+NAME: redux-store-init
  #+BEGIN_SRC js
  export function configureStore() {
    const store = createStore(
      combineReducers(reducers),
      composeEnhancers(applyMiddleware(
        thunk
      ))
    );
    if (module.hot) {
      module.hot.accept('./reducers', () => {
        const nextReducer = require('./reducers/index');
        store.replaceReducer(nextReducer);
      });
    }
    return store;
  };
  #+END_SRC

** Mount root component

  - mount root component in DOM.
  - then fetch tasks list from server.

  #+NAME: mount-root-component
  #+BEGIN_SRC js
  ReactDOM.render(
      <Root store={store} />,
    document.getElementById('root'),
    () => { store.dispatch(actions.fetchTasks()); }
  );
  #+END_SRC

* Components

** Root

  - provides store to App.
  - wraps App in router.

  #+NAME: root-component
  #+BEGIN_SRC jsx
  export const Root = hot(module)(({store}) => (
    <Provider store={store}>
      <BrowserRouter>
	<AppShell />
      </BrowserRouter>
    </Provider>
  ));
  #+END_SRC

** AppShell

  - displays the main app menu.
  - routes the main page.

  #+NAME: app-shell-component
  #+BEGIN_SRC jsx
  export const AppShell = () => (
    <div>
      <AppMenu />
      <Switch>
	<Route exact path="/" component={HomePage} />
	<Route exact path="/test" component={TestPage} />
      </Switch>
    </div>
  );
  #+END_SRC

** AppMenu

  #+NAME: app-menu-component
  #+BEGIN_SRC jsx
  export const AppMenu = () => {
    const pathname = window.location.pathname;
    return (
      <Menu fixed="top" inverted>
        <Container>
          <Menu.Item header>
            React Demo
          </Menu.Item>
          <Menu.Item active={pathname === "/"} as={Link} to="/">Home</Menu.Item>
          <Menu.Item active={pathname === "/test"} as={Link} to="/test">Test</Menu.Item>
        </Container>
      </Menu>
    );
  };
  #+END_SRC

* Styles

  #+BEGIN_SRC css :tangle ../src/index.css :mkdirp yes
  body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
  }
  #+END_SRC

* Files :noexport:

** HTML index

  #+BEGIN_SRC html :tangle ../public/index.html :mkdirp yes
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
      <meta name="theme-color" content="#000000">
      <link rel="manifest" href="%PUBLIC_URL%/manifest.json">
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.css"></link>
      <title>Demo React App</title>
    </head>
    <body>
      <noscript>
        You need to enable JavaScript to run this app.
      </noscript>
      <div id="root"></div>
    </body>
  </html>
  #+END_SRC

** JS index

  #+BEGIN_SRC js :tangle ../src/index.js :noweb yes :mkdirp yes
  import React from "react";
  import ReactDOM from "react-dom";

  import {Root} from "./components/Root";
  import actions from "./actions";
  import {configureStore} from "./store";
  import "./index.css";

  const store = configureStore();

  <<mount-root-component>>
  #+END_SRC

** Store

  #+BEGIN_SRC js :tangle ../src/store.js :noweb yes :mkdirp yes
  import {applyMiddleware, createStore, combineReducers, compose} from "redux";
  import thunk from "redux-thunk";

  import reducers from "./reducers";

  <<redux-devtools-init>>
  <<redux-store-init>>
  #+END_SRC

** Components

  #+BEGIN_SRC js :tangle ../src/components/Root.js :noweb yes :mkdirp yes
  import React from "react";
  import {BrowserRouter} from "react-router-dom";
  import {hot} from "react-hot-loader";
  import {AppShell} from "./AppShell";

  import {Provider} from "react-redux";

  <<root-component>>
  #+END_SRC

  #+BEGIN_SRC js :tangle ../src/components/AppShell.js :noweb yes :mkdirp yes
  import React from "react";
  import {Route, Switch} from "react-router-dom";
  import {AppMenu} from "./AppMenu";
  import {HomePage, TestPage} from "../pages";

  <<app-shell-component>>
  #+END_SRC

  #+BEGIN_SRC js :tangle ../src/components/AppMenu.js :noweb yes :mkdirp yes
  import React from "react";
  import {Link} from "react-router-dom";
  import {Container, Header, Menu} from "semantic-ui-react";

  <<app-menu-component>>
  #+END_SRC
