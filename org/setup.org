#+TITLE: Tools setup
#+SETUPFILE: ./publish.setup

[[./index.html][Documentation index]]

* Build
** Compile org files
   :PROPERTIES:
   :header-args: :noweb-ref docker-org
   :END:

*** Emacs setup

    Emacs base image.
    #+BEGIN_SRC dockerfile
    FROM emacs-org as emacs
    #+END_SRC

*** Tangle & publish source

    Copy Org project files.
    #+BEGIN_SRC dockerfile
    WORKDIR /app
    COPY ./org ./org
    #+END_SRC

    Tangle all source code.

    Produces files in =src/, public/, doc/=.
    #+BEGIN_SRC dockerfile
    RUN emacs --batch -l "/root/.emacs.d/init.el" \
        --eval "(tangle-all \"org\")" \
        --eval "(publish-all \"Demo React\" \"org\" \"docs\")"
    #+END_SRC

    Copy emacs theme for docs.
    #+BEGIN_SRC dockerfile
    RUN cp /root/theme.css /app/docs/
    #+END_SRC

** Compile react app
   :PROPERTIES:
   :header-args: :noweb-ref docker-react
   :END:

   Node base image.
   #+BEGIN_SRC dockerfile
   FROM node:10 as node
   #+END_SRC

   Install node packages.
   #+BEGIN_SRC dockerfile
   WORKDIR /app
   COPY package*.json ./
   RUN npm install
   #+END_SRC

   Copy files produced by emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/src ./src
   COPY --from=emacs /app/public ./public
   COPY --from=emacs /app/.babelrc .
   COPY --from=emacs /app/webpack.config.js .
   #+END_SRC

   Build react application for production.
   Produces files in =build/=.
   #+BEGIN_SRC dockerfile
   RUN npm run build
   #+END_SRC

** Serve app
   :PROPERTIES:
   :header-args: :noweb-ref docker-server
   :END:

   Nginx base image.
   #+BEGIN_SRC dockerfile
   FROM nginx as server
   #+END_SRC

   Get react app files from react image.
   #+BEGIN_SRC dockerfile
   COPY --from=node /app/build /usr/share/nginx/html
   #+END_SRC

   Get documentation files from emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/docs /usr/share/nginx/html/docs
   #+END_SRC

   Get configuration template.
   #+BEGIN_SRC dockerfile
   COPY ./nginx.conf.template /etc/nginx/conf.d/conf.template
   #+END_SRC

   Inject =$PORT= value in config at startup.
   #+BEGIN_SRC dockerfile
   ENV PORT 80
   CMD /bin/bash -c "envsubst < /etc/nginx/conf.d/conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
   #+END_SRC

** Developement
   :PROPERTIES:
   :header-args: :noweb-ref docker-services-dev
   :END:

   Build local Dockerfile:
   - stops at node/react image (dev server is provided by react scripts).
   #+BEGIN_SRC yaml
   build:
     context: .
     target: node
   container_name: demo-react-dev
   #+END_SRC

   Starts dev server.
   - export port 3000 for main server.
   - export port 8081 for hot-reload websocket.
   #+BEGIN_SRC yaml
   command: npm start
   ports:
     - "3000:3000"
     - "8081:8081"
   #+END_SRC

   Mount all local directories containing tangled files.
   #+BEGIN_SRC yaml
   volumes:
     - ./src:/app/src
     - ./public:/app/public
     - ./package.json:/app/package.json
     - ./package-lock.json:/app/package-lock.json
     - ./.babelrc:/app/.babelrc
     - ./webpack.config.js:/app/webpack.config.js
   #+END_SRC

* Node
** Build configuration

   Build mode based on =NODE_ENV=.
   #+NAME: webpack-mode
   #+BEGIN_SRC json
   "mode": (process.env.NODE_ENV === "production") ? "production" : "development"
   #+END_SRC

   Basic build I/O.
   #+NAME: webpack-io
   #+BEGIN_SRC json
   "entry": "./src/index.js",
   "output": {
     "path": path.join(__dirname, "/build"),
     "filename": "index.js"
   }
   #+END_SRC

   Babel loader.
   #+NAME: webpack-babel-loader
   #+BEGIN_SRC json
   {
     "test": /\.js$/,
     "exclude": /node_modules/,
     "use": {
       "loader": "babel-loader"
     }
   }
   #+END_SRC

   Babel config.
   - react (JSX) support.
   - allows es7 object spread.
   - include react-hot-loader plugin for HMR.
   #+BEGIN_SRC json :tangle ../.babelrc
   {
     "presets": [
       "env",
       "react"
     ],
     "plugins": [
       "react-hot-loader/babel",
       "transform-object-rest-spread"
     ]
   }
   #+END_SRC

   CSS loader.
   #+NAME: webpack-css-loader
   #+BEGIN_SRC json
   {
     "test": /\.css$/,
     "use": ["style-loader", "css-loader"]
   }
   #+END_SRC

   Generate HTML index.
   This takes the index file in =public/=, make a copy in =build/= and inject scripts.
   #+NAME: webpack-html-plugin
   #+BEGIN_SRC js
   new HtmlWebpackPlugin({
     template: "./public/index.html"
   })
   #+END_SRC

   Copy resources files from =public/= to =build/=.
   Ignore =index.html= since it's copied by HTML plugin ?
   #+NAME: webpack-copy-plugin
   #+BEGIN_SRC js
   new CopyWebpackPlugin([
     { from: 'public', }
   ], {
     ignore: ["index.html"],
   })
   #+END_SRC

* Server
** nginx

   Need a default configuration template to inject the =$PORT= value.
   #+BEGIN_SRC conf :tangle ../nginx.conf.template
   server {
   listen       ${PORT};
   server_name  localhost;
   location / {
   root   /usr/share/nginx/html;
   index  index.html index.htm;
   }
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
   root   /usr/share/nginx/html;
   }
   }
   #+END_SRC

** WebApp manifest

   #+BEGIN_SRC json :tangle ../public/manifest.json :mkdirp yes
   {
     "short_name": "Demo React App",
     "name": "Demo React App",
     "icons": [],
     "start_url": "./index.html",
     "display": "standalone",
     "theme_color": "#000000",
     "background_color": "#ffffff"
   }
   #+END_SRC

* Files                                                            :noexport:
** Docker

   #+BEGIN_SRC sh :tangle ../.dockerignore
   node_modules
   build
   public
   src
   docs
   #+END_SRC

   #+BEGIN_SRC dockerfile :tangle ../Dockerfile :noweb yes
   <<docker-org>>

   <<docker-react>>

   <<docker-server>>
   #+END_SRC

   #+BEGIN_SRC yaml :tangle ../docker-compose.yml :noweb yes
   version: '2.3'

   services:
     dev:
       <<docker-services-dev>>
   #+END_SRC

** Node

   Webpack config.

   #+BEGIN_SRC js :tangle ../webpack.config.js :noweb yes
   const path = require("path");
   const webpack = require("webpack");
   const CopyWebpackPlugin = require("copy-webpack-plugin");
   const HtmlWebpackPlugin = require("html-webpack-plugin");

   module.exports = {
     <<webpack-mode>>,
     <<webpack-io>>,
     module: {
       rules: [
         <<webpack-babel-loader>>,
         <<webpack-css-loader>>
       ]
     },
     plugins: [
       new webpack.ProgressPlugin(),
       <<webpack-copy-plugin>>,
       <<webpack-html-plugin>>
     ]
   };
   #+END_SRC
