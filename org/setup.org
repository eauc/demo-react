#+TITLE: Tools setup
#+SETUPFILE: ./publish.setup

[[./index.html][Documentation index]]

* Build

** Compile org files
   :PROPERTIES:
   :header-args: :noweb-ref docker-org
   :END:

*** Emacs setup

    Emacs base image.
    #+BEGIN_SRC dockerfile
    FROM emacs-org as emacs
    #+END_SRC

*** Tangle & publish source

    Copy Org project files.
    #+BEGIN_SRC dockerfile
    WORKDIR /app
    COPY ./org ./org
    #+END_SRC

    Tangle all source code.

    Produces files in =src/, public/, doc/=.
    #+BEGIN_SRC dockerfile
    RUN emacs --batch -l "/root/.emacs.d/init.el" \
        --eval "(tangle-all \"org\")" \
        --eval "(publish-all \"Demo React\" \"org\" \"docs\")"
    #+END_SRC

    Copy emacs theme for docs.
    #+BEGIN_SRC dockerfile
    RUN cp /root/theme.css /app/docs/
    #+END_SRC

** Compile react app
   :PROPERTIES:
   :header-args: :noweb-ref docker-react
   :END:

   Node base image.
   #+BEGIN_SRC dockerfile
   FROM node:10 as node
   #+END_SRC

   Install node packages.
   #+BEGIN_SRC dockerfile
   WORKDIR /app
   COPY --from=emacs /app/package.json .
   COPY package-lock.json .
   RUN npm install
   #+END_SRC

   Copy files produced by emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/src ./src
   COPY --from=emacs /app/public ./public
   COPY --from=emacs /app/.babelrc .
   COPY --from=emacs /app/webpack.config.js .
   #+END_SRC

   Build react application for production.
   Produces files in =build/=.
   #+BEGIN_SRC dockerfile
   RUN npm run build
   #+END_SRC

** Serve app
   :PROPERTIES:
   :header-args: :noweb-ref docker-server
   :END:

   Nginx base image.
   #+BEGIN_SRC dockerfile
   FROM nginx as server
   #+END_SRC

   Get react app files from react image.
   #+BEGIN_SRC dockerfile
   COPY --from=node /app/build /usr/share/nginx/html
   #+END_SRC

   Get documentation files from emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/docs /usr/share/nginx/html/docs
   #+END_SRC

   Get configuration template.
   #+BEGIN_SRC dockerfile
   COPY ./nginx.conf.template /etc/nginx/conf.d/conf.template
   #+END_SRC

   Inject =$PORT= value in config at startup.
   #+BEGIN_SRC dockerfile
   ENV PORT 80
   CMD /bin/bash -c "envsubst < /etc/nginx/conf.d/conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
   #+END_SRC

** Developement
   :PROPERTIES:
   :header-args: :noweb-ref docker-services-dev
   :END:

   Build local Dockerfile:
   - stops at node/react image (dev server is provided by react scripts).
   #+BEGIN_SRC yaml
   build:
     context: .
     target: node
   container_name: demo-react-dev
   #+END_SRC

   Starts dev server.
   - export port 3000 for main server.
   - export port 8081 for hot-reload websocket.
   #+BEGIN_SRC yaml
   command: npm start
   ports:
     - "3000:3000"
     - "8081:8081"
   #+END_SRC

   Mount all local directories containing tangled files.
   #+BEGIN_SRC yaml
   volumes:
     - ./src:/app/src
     - ./public:/app/public
     - ./package.json:/app/package.json
     - ./package-lock.json:/app/package-lock.json
     - ./.babelrc:/app/.babelrc
     - ./webpack.config.js:/app/webpack.config.js
   #+END_SRC

* Node

** Development dependencies

   Webpack builder.
   #+NAME: deps-webpack
   #+BEGIN_SRC json
   "webpack-cli": "3.0.3",
   "webpack": "^4.12.0"
   #+END_SRC

   Webpack dev server.
   #+NAME: deps-webpack-server
   #+BEGIN_SRC json
   "webpack-serve": "^1.0.3"
   #+END_SRC

   Babel transpiler.
   #+NAME: deps-babel
   #+BEGIN_SRC json
   "babel-loader": "^7.1.4",
   "babel-preset-env": "^1.7.0",
   "babel-preset-react": "^6.24.1",
   "babel-core": "^6.26.3",
   "babel-plugin-transform-object-rest-spread": "^6.26.0"
   #+END_SRC

   React HMR.
   #+NAME: deps-react-hmr
   #+BEGIN_SRC json
   "react-hot-loader": "^4.3.3"
   #+END_SRC

   Style loader.
   #+NAME: deps-css
   #+BEGIN_SRC json
   "css-loader": "^0.28.11",
   "style-loader": "^0.21.0"
   #+END_SRC

   Sass support.
   #+NAME: deps-sass
   #+BEGIN_SRC json
   "node-sass-chokidar": "^1.2.2"
   #+END_SRC

   HTML generator.
   #+NAME: deps-html
   #+BEGIN_SRC json
   "html-webpack-plugin": "^3.2.0"
   #+END_SRC

   Copy files.
   #+NAME: deps-copy
   #+BEGIN_SRC json
   "copy-webpack-plugin": "^4.5.1"
   #+END_SRC

** Dependencies

   - parallel script execution.
   - Ramda functionnal library.
   - fake data.
   - unique Ids.
   #+NAME: deps-utils
   #+BEGIN_SRC json
   "npm-run-all": "^4.1.2",
   "ramda": "^0.25.0",
   "faker": "^4.1.0",
   "node-uuid": "^1.4.8"
   #+END_SRC

   React frontend.
   #+NAME: deps-react
   #+BEGIN_SRC json
   "react": "^16.2.0",
   "react-dom": "^16.2.0",
   "classnames": "^2.2.5"
   #+END_SRC

   Router.
   #+NAME: deps-router
   #+BEGIN_SRC json
   "react-router-dom": "^4.2.2"
   #+END_SRC

   Bootstrap:
   - react-router-bootstrap is necessary to make NavLink work with react router.
   #+NAME: deps-bootstrap
   #+BEGIN_SRC json
   "react-bootstrap": "^0.32.1",
   "react-router-bootstrap": "^0.24.4"
   #+END_SRC

   Redux state management.
   #+NAME: deps-redux
   #+BEGIN_SRC json
   "redux": "^3.7.2",
   "redux-thunk": "^2.2.0",
   "reselect": "^3.0.1",
   "react-redux": "^5.0.7",
   "redux-form": "^7.3.0"
   #+END_SRC

** Build configuration

   Build mode based on =NODE_ENV=.
   #+NAME: webpack-mode
   #+BEGIN_SRC json
   "mode": (process.env.NODE_ENV === "production") ? "production" : "development"
   #+END_SRC

   Basic build I/O.
   #+NAME: webpack-io
   #+BEGIN_SRC json
   "entry": "./src/index.js",
   "output": {
     "path": path.join(__dirname, "/build"),
     "filename": "index.js"
   }
   #+END_SRC

   Babel loader.
   #+NAME: webpack-babel-loader
   #+BEGIN_SRC json
   {
     "test": /\.js$/,
     "exclude": /node_modules/,
     "use": {
       "loader": "babel-loader"
     }
   }
   #+END_SRC

   Babel config.
   - react (JSX) support.
   - allows es7 object spread.
   - include react-hot-loader plugin for HMR.
   #+BEGIN_SRC json :tangle ../.babelrc
   {
     "presets": [
       "env",
       "react"
     ],
     "plugins": [
       "react-hot-loader/babel",
       "transform-object-rest-spread"
     ]
   }
   #+END_SRC

   CSS loader.
   #+NAME: webpack-css-loader
   #+BEGIN_SRC json
   {
     "test": /\.css$/,
     "use": ["style-loader", "css-loader"]
   }
   #+END_SRC

   Generate HTML index.
   This takes the index file in =public/=, make a copy in =build/= and inject scripts.
   #+NAME: webpack-html-plugin
   #+BEGIN_SRC js
   new HtmlWebpackPlugin({
     template: "./public/index.html"
   })
   #+END_SRC

   Copy resources files from =public/= to =build/=.
   Ignore =index.html= since it's copied by HTML plugin ?
   #+NAME: webpack-copy-plugin
   #+BEGIN_SRC js
   new CopyWebpackPlugin([
     { from: 'public', }
   ], {
     ignore: ["index.html"],
   })
   #+END_SRC

** Scripts

   #+NAME: scripts-main
   #+BEGIN_SRC json
   "start": "npm-run-all -p start-js watch-css",
   "build": "npm-run-all build-css build-js"
   #+END_SRC

   Webpack dev server:
   - hot-reload.
   - serve on all interfaces, port 3000.
   #+NAME: scripts-react
   #+BEGIN_SRC json
   "start-js": "NODE_ENV=development webpack-serve --hot --host 0.0.0.0 --port 3000",
   "build-js": "NODE_ENV=production webpack"
   #+END_SRC

   SASS builds.
   #+NAME: scripts-sass
   #+BEGIN_SRC json
   "build-css": "node-sass-chokidar src/ -o src/",
   "watch-css": "npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"
   #+END_SRC

* Server

** nginx

   Need a default configuration template to inject the =$PORT= value.
   #+BEGIN_SRC conf :tangle ../nginx.conf.template
   server {
   listen       ${PORT};
   server_name  localhost;
   location / {
   root   /usr/share/nginx/html;
   index  index.html index.htm;
   }
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
   root   /usr/share/nginx/html;
   }
   }
   #+END_SRC

** WebApp manifest

   #+BEGIN_SRC json :tangle ../public/manifest.json :mkdirp yes
   {
     "short_name": "Demo React App",
     "name": "Demo React App",
     "icons": [],
     "start_url": "./index.html",
     "display": "standalone",
     "theme_color": "#000000",
     "background_color": "#ffffff"
   }
   #+END_SRC

* Files                                                            :noexport:

** Docker

   #+BEGIN_SRC sh :tangle ../.dockerignore
   node_modules
   build
   public
   src
   docs
   #+END_SRC

   #+BEGIN_SRC dockerfile :tangle ../Dockerfile :noweb yes
   <<docker-org>>

   <<docker-react>>

   <<docker-server>>
   #+END_SRC

   #+BEGIN_SRC yaml :tangle ../docker-compose.yml :noweb yes
   version: '2.3'

   services:
     dev:
       <<docker-services-dev>>
   #+END_SRC

** Node

   Dependencies.

   #+BEGIN_SRC json :tangle ../package.json :noweb yes
   {
     "name": "demo-react",
     "version": "0.1.0",
     "private": true,
     "dependencies": {
         <<deps-utils>>,
         <<deps-react>>,
         <<deps-router>>,
         <<deps-bootstrap>>,
         <<deps-redux>>
     },
     "devDependencies": {
         <<deps-babel>>,
         <<deps-copy>>,
         <<deps-css>>,
         <<deps-html>>,
         <<deps-react-hmr>>,
         <<deps-webpack>>,
         <<deps-webpack-server>>,
         <<deps-sass>>
     },
     "scripts": {
         <<scripts-main>>,
         <<scripts-react>>,
         <<scripts-sass>>
     }
   }
   #+END_SRC

   Webpack config.

   #+BEGIN_SRC js :tangle ../webpack.config.js :noweb yes
   const path = require("path");
   const webpack = require("webpack");
   const CopyWebpackPlugin = require("copy-webpack-plugin");
   const HtmlWebpackPlugin = require("html-webpack-plugin");

   module.exports = {
     <<webpack-mode>>,
     <<webpack-io>>,
     module: {
       rules: [
         <<webpack-babel-loader>>,
         <<webpack-css-loader>>
       ]
     },
     plugins: [
       new webpack.ProgressPlugin(),
       <<webpack-copy-plugin>>,
       <<webpack-html-plugin>>
     ]
   };
   #+END_SRC
