#+TITLE: Tools setup
#+SETUPFILE: ./publish.setup

[[./index.html][Documentation index]]

* Build

** Compile org files
   :PROPERTIES:
   :header-args: :noweb-ref docker-org
   :END:

*** Emacs setup

    Emacs base image.
    #+BEGIN_SRC dockerfile
    FROM eauc/emacs-org as emacs
    #+END_SRC

*** Tangle source

    Copy Org project files.
    #+BEGIN_SRC dockerfile
    WORKDIR /app
    COPY ./org ./org
    #+END_SRC

    Tangle all source code.

    Produces files in =src/= and =public/=.
    #+BEGIN_SRC dockerfile
    RUN HOME=/home/emacs emacs --batch \
	-l "/home/emacs/elisp/init.el" \
	-l "/home/emacs/elisp/tangle-all.el" \
	--eval "(tangle-all \"org\")"
    #+END_SRC

*** Publish documentation

    Publish all HTML documentation.

    Produces files in =doc/=.
    #+BEGIN_SRC dockerfile
    RUN HOME=/home/emacs emacs --batch \
	-l "/home/emacs/elisp/init.el" \
	-l "/home/emacs/elisp/publish-all.el" \
	--eval "(publish-all \"Demo React\" \"org\" \"docs\")"
    #+END_SRC

** Compile react app
   :PROPERTIES:
   :header-args: :noweb-ref docker-react
   :END:

   Node base image.
   #+BEGIN_SRC dockerfile
   FROM node:8 as node
   #+END_SRC

   Install node packages.
   #+BEGIN_SRC dockerfile
   WORKDIR /app
   COPY --from=emacs /app/package.json .
   COPY yarn.lock .
   RUN npm install -g yarn
   RUN yarn install
   #+END_SRC

   Copy files produced by emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/src ./src
   COPY --from=emacs /app/public ./public
   #+END_SRC

   Build react application for production.
   Produces files in =build/=.
   #+BEGIN_SRC dockerfile
   RUN npm run build
   #+END_SRC

** Serve app
   :PROPERTIES:
   :header-args: :noweb-ref docker-server
   :END:

   Nginx base image.
   #+BEGIN_SRC dockerfile
   FROM nginx as server
   #+END_SRC

   Get react app files from react image.
   #+BEGIN_SRC dockerfile
   COPY --from=node /app/build /usr/share/nginx/html
   #+END_SRC

   Get documentation files from emacs-org image.
   #+BEGIN_SRC dockerfile
   COPY --from=emacs /app/docs /usr/share/nginx/html/docs
   #+END_SRC

   Get configuration template.
   #+BEGIN_SRC dockerfile
   COPY ./nginx.conf.template /etc/nginx/conf.d/conf.template
   #+END_SRC

   Inject =$PORT= value in config at startup.
   #+BEGIN_SRC dockerfile
   ENV PORT 80
   CMD /bin/bash -c "envsubst < /etc/nginx/conf.d/conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
   #+END_SRC

** Developement
   :PROPERTIES:
   :header-args: :noweb-ref docker-services-dev
   :END:

   Build local Dockerfile:
   - stops at node/react image (dev server is provided by react scripts).
   #+BEGIN_SRC yaml
   build:
     context: .
     target: node
   container_name: demo-react-dev
   #+END_SRC

   Starts dev server.
   #+BEGIN_SRC yaml
   command: npm start
   ports:
     - "3000:3000"
   #+END_SRC

   Mount all local directories containing tangled files.
   #+BEGIN_SRC yaml
   volumes:
     - ./src:/app/src
     - ./public:/app/public
     - ./package.json:/app/package.json
     - ./yarn.lock:/app/yarn.lock
   #+END_SRC

* Node

** Dependencies

   - Ramda functionnal library.
   - fake data.
   - unique Ids.
   #+NAME: deps-utils
   #+BEGIN_SRC json
   "ramda": "^0.25.0",
   "faker": "^4.1.0",
   "node-uuid": "^1.4.8"
   #+END_SRC

   React frontend.
   #+NAME: deps-react
   #+BEGIN_SRC json
   "react": "^16.2.0",
   "react-dom": "^16.2.0",
   "react-scripts": "^1.1.1"
   #+END_SRC

   Router.
   #+NAME: deps-router
   #+BEGIN_SRC json
   "react-router-dom": "^4.2.2"
   #+END_SRC

   Bootstrap:
   - react-router-bootstrap is necessary to make NavLink work with react router.
   #+NAME: deps-bootstrap
   #+BEGIN_SRC json
   "react-bootstrap": "^0.32.1",
   "react-router-bootstrap": "^0.24.4"
   #+END_SRC

   Redux state management.
   #+NAME: deps-redux
   #+BEGIN_SRC json
   "redux": "^3.7.2",
   "redux-thunk": "^2.2.0",
   "reselect": "^3.0.1",
   "react-redux": "^5.0.7"
   #+END_SRC

** Scripts

   Defaults React scripts.
   #+NAME: scripts-react
   #+BEGIN_SRC json
   "start": "react-scripts start",
   "build": "react-scripts build",
   "test": "react-scripts test --env=jsdom",
   "test:debug": "react-scripts --inspect-brk test --runInBand --env=jsdom",
   "eject": "react-scripts eject"
   #+END_SRC

* Server

** nginx

   Need a default configuration template to inject the =$PORT= value.
   #+BEGIN_SRC conf :tangle ../nginx.conf.template
   server {
   listen       ${PORT};
   server_name  localhost;
   location / {
   root   /usr/share/nginx/html;
   index  index.html index.htm;
   }
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
   root   /usr/share/nginx/html;
   }
   }
   #+END_SRC

** WebApp manifest

   #+BEGIN_SRC json :tangle ../public/manifest.json :mkdirp yes
   {
     "short_name": "Demo React App",
     "name": "Demo React App",
     "icons": [],
     "start_url": "./index.html",
     "display": "standalone",
     "theme_color": "#000000",
     "background_color": "#ffffff"
   }
   #+END_SRC

* Files                                                            :noexport:

** Docker

   #+BEGIN_SRC sh :tangle ../.dockerignore
   node_modules
   build
   public
   src
   docs
   #+END_SRC

   #+BEGIN_SRC dockerfile :tangle ../Dockerfile :noweb yes
   <<docker-org>>

   <<docker-react>>

   <<docker-server>>
   #+END_SRC

   #+BEGIN_SRC yaml :tangle ../docker-compose.yml :noweb yes
   version: '2.3'

   services:
     dev:
       <<docker-services-dev>>
   #+END_SRC

** Node

   #+BEGIN_SRC json :tangle ../package.json :noweb yes
   {
     "name": "demo-react",
     "version": "0.1.0",
     "private": true,
     "dependencies": {
         <<deps-utils>>,
         <<deps-react>>,
         <<deps-router>>,
         <<deps-bootstrap>>,
         <<deps-redux>>
     },
     "scripts": {
         <<scripts-react>>
     }
   }
   #+END_SRC
