#+TITLE: Tasks store
#+SETUPFILE: ./publish.setup

[[./index.org][Documentation index]]

* Model

  A task is a JSON object with an ID, a title, a description and a done flag.
  #+BEGIN_SRC json :tangle no
  {
    "id": "string",
    "title": "string",
    "description": "string",
    "done": false
  }
  #+END_SRC

* Store
  :PROPERTIES:
  :header-args: :noweb-ref tasks-default-state :noweb-sep ",\n"
  :END:

  We need a flag to know if a fetch request is ongoing.
  #+BEGIN_SRC json
  "fetching": false
  #+END_SRC

  We will store the tasks entries retrieved from server in an object, mapping =id= to tasks.
  #+BEGIN_SRC json
  "entries": {}
  #+END_SRC

* API
  :PROPERTIES:
  :header-args: :noweb-ref tasks-api
  :END:

** Fake data

   We need fake data to replace the state of tasks in server.
   We just generate 5 random tasks at startup.

   #+BEGIN_SRC js
   let FAKE_DATA =  R.pipe(
     R.times(() => {
       return {
	 id: v4(),
	 title: faker.lorem.words(),
	 description: faker.lorem.sentences(),
	 done: faker.random.boolean(),
       };
     }),
     R.map((entry) => {
       return [entry.id, entry];
     }),
     R.fromPairs
   )(5);
   #+END_SRC

** Fetch

   We simulate a request to the server with a 1s resolution delay.

   #+BEGIN_SRC js
   export function fetchTasks() {
     return new Promise((resolve) => {
       setTimeout(resolve, 1000);
     }).then(() => {
       return {
         entries: FAKE_DATA,
       };
     });
   }
   #+END_SRC

** Toggle task done

   - checks if task exists, otherwise reject request.
   - toggles done flag on data.
   - returns updated task.

   #+BEGIN_SRC js
   export function toggleTaskDone({id}) {
     return new Promise((resolve) => {
       setTimeout(resolve, 200);
     }).then(() => {
       const task = R.prop(id, FAKE_DATA);
       if (R.isNil(task)) {
	 return Promise.reject({
	   message: "unknown task id",
	   id,
	 });
       }
       const updatedTask = R.over(
	 R.lensProp("done"),
	 R.not,
	 task
       );
       FAKE_DATA = R.assoc(id, updatedTask, FAKE_DATA);
       return {
	 entry: updatedTask,
       };
     });
   }
   #+END_SRC

* Actions
  :PROPERTIES:
  :header-args: :noweb-ref tasks-actions
  :END:

** Fetch

   We set and clear the fetching flag before and after the request.
   TODO: handle request error.

   #+BEGIN_SRC js
   export function fetchTasks() {
     return (dispatch) => {
       dispatch({type: "TASKS/FETCH_ENTRIES"});
       return api.fetchTasks()
         .then(({entries}) => {
           dispatch({type: "TASKS/SET_ENTRIES", entries});
         });
     };
   }
   #+END_SRC

** toggle Task done

   - eagerly updates local task state.
   - toggles task done flag in server.
   - updates task entry in local state on success.
   TODO: refresh all entries on error.

   #+BEGIN_SRC js
   export function toggleTaskDone({id}) {
     return (dispatch) => {
       dispatch({type: "TASKS/TOGGLE_DONE", id});
       return api.toggleTaskDone({id})
	 .then(({entry}) => {
	   dispatch({type: "TASKS/UPDATE_ENTRY", id, entry});
	 });
     };
   }
   #+END_SRC

* Reducers
  :PROPERTIES:
  :header-args: :noweb-ref tasks-reducers
  :END:

** Fetch entries

   - set fetching flag.

   #+BEGIN_SRC js
   case "TASKS/FETCH_ENTRIES":
   {
     return R.assoc("fetching", true, state);
   }
   #+END_SRC

** Set entries

   - reset fetching flag.
   - set tasks entries state.

   #+BEGIN_SRC js
   case "TASKS/SET_ENTRIES":
   {
     return R.pipe(
       R.assoc("fetching", false),
       R.assoc("entries", entries)
     )(state);
   }
   #+END_SRC

** Update one entry

   - reset fetching flag.
   - update task entry.

   #+BEGIN_SRC js
   case "TASKS/UPDATE_ENTRY":
   {
     return R.pipe(
       R.assoc("fetching", false),
       R.assocPath(["entries", id], entry)
     )(state);
   }
   #+END_SRC

** Toggle task done

   - set fetching flag.
   - eagerly update task entry.
     
   #+BEGIN_SRC js
   case "TASKS/TOGGLE_DONE":
   {
     return R.pipe(
       R.assoc("fetching", true),
       R.over(R.lensPath(["entries", id, "done"]), R.not)
     )(state);
   }
   #+END_SRC

* Components
  :PROPERTIES:
  :header-args: :noweb-ref tasks-components
  :END:

** Task

   We just render the task title in the list.
   An empty box or a check is displayed in front of the title depending on the =done= state.
   The user can click on the check/box to toggle the =done= state.

   #+BEGIN_SRC jsx
   const Task = ({id, title, done, toggleTaskDone}) => (
     <tr className="tasks-item">
       <td className="tasks-done"
	   onClick={() => toggleTaskDone({id})}>
	 {done ? "✔" : "□"}
       </td>
       <td className={classNames({
	     done,
	   })}>
	 {title}
       </td>
     </tr>
   );
   #+END_SRC

** Task edit

   #+BEGIN_SRC jsx
   export const TaskEdit = reduxForm({
     form: "task",
   })(({handleSubmit}) => {
     return (
       <form onSubmit={handleSubmit}>
	 <div>
	   <Field name="title"
		  component="input"
		  type="text"
		  placeholder="title" />
	 </div>
	 <div>
	   <Field name="description"
		  component="textarea"
		  type="text"
		  placeholder="title" />
	 </div>
       </form>
     );
   });
   #+END_SRC

** Tasks List

   The tasks list is just a table.

   #+BEGIN_SRC jsx
   const TasksList = ({tasksList, toggleTaskDone}) => {
     const tasks = R.map(([id, task]) => (
       <Task key={id} toggleTaskDone={toggleTaskDone} {...task}/>
     ), R.toPairs(tasksList));

     return (
       <Table className="tasks-list" hover>
	 <tbody>
	   {tasks}
	 </tbody>
       </Table>
     );
   };
   #+END_SRC

** Tasks List container

   For now we only need the current tasks list.

   #+BEGIN_SRC js
   function mapStateToProps(state) {
     return {
       tasksList: getTasksList(state),
     };
   }

   const TasksListContainer = connect(
     mapStateToProps,
     actions
   )(TasksList);
   #+END_SRC

** Styles
  :PROPERTIES:
  :header-args: :noweb-ref tasks-styles
  :END:

  Remove the rows top border from Bootstrap.
  We need to have the same selector weight as Bootstrap's.

  #+BEGIN_SRC css
  .tasks-list {
      tbody {
	  tr {
	      td {
		  border-top: 0;
	      }
	  }
      }
  }
  #+END_SRC

  Display a clicking cursor on rows to show the user can toggle =done= state or edit task.
  When task is done, strike the title.

  #+BEGIN_SRC css
  .tasks-item {
      cursor: pointer;

      & .done {
	  text-decoration: line-through;
      }
  }
  #+END_SRC

  Disable text selection when user clicks rapidly on =done= check.
  Use smallest possible column width.

  #+BEGIN_SRC css
  .tasks-done {
      user-select: none;
      width: 1%;
  }
  #+END_SRC

* Selectors
  :PROPERTIES:
  :header-args: :noweb-ref tasks-selectors
  :END:

** Tasks list

   Get the current tasks entries and convert to an array of tasks object.

   #+BEGIN_SRC js
   export const getTasksList = createSelector(
     R.path(["tasks", "entries"]),
     R.values
   );
   #+END_SRC

* Files :noexport:

** API

   #+BEGIN_SRC js :tangle ../src/api/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import faker from "faker";
   import {v4} from "node-uuid";

     <<tasks-api>>
   #+END_SRC

** Actions

   #+BEGIN_SRC js :tangle ../src/actions/tasks.js :noweb yes :mkdirp yes
   import * as api from "../api/tasks";

     <<tasks-actions>>
   #+END_SRC

** Reducers

   #+BEGIN_SRC js :tangle ../src/reducers/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";

   const DEFAULT_STATE = {
       <<tasks-default-state>>
   };

   export default function tasks(state = DEFAULT_STATE, {type, id, entry, entries}) {
     switch(type) {
         <<tasks-reducers>>
     default: {}
     };
     return state;
   }
   #+END_SRC

** Selectors

   #+BEGIN_SRC js :tangle ../src/selectors/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import {createSelector} from "reselect";

     <<tasks-selectors>>
   #+END_SRC

** Components

   #+BEGIN_SRC js :tangle ../src/components/Tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import React from "react";
   import {connect} from "react-redux";
   import {Table} from "react-bootstrap";
   import {Field, reduxForm} from "redux-form";
   import classNames from "classnames";
   import actions from "../actions";
   import {getTasksList} from "../selectors/tasks";
   import "./Tasks.css";

     <<tasks-components>>

   export default TasksListContainer;
   #+END_SRC

   #+BEGIN_SRC js :tangle ../src/components/Tasks.scss :noweb yes :mkdirp yes
     <<tasks-styles>>
   #+END_SRC
