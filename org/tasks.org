#+TITLE: Tasks store
#+SETUPFILE: ./publish.setup

[[./index.org][Documentation index]]

* Model

  A task is a JSON object with an ID, a title and a description.
  #+BEGIN_SRC json :tangle no
  {
    "id": "string",
    "title": "string",
    "description": "string"
  }
  #+END_SRC

* State
  :PROPERTIES:
  :header-args: :noweb-ref tasks-default-state :noweb-sep ",\n"
  :END:

  We need a flag to know if a fetch request is ongoing.
  #+BEGIN_SRC json
  "fetching": false
  #+END_SRC

  We will store the tasks entries retrieved from server in an object, mapping =id=s to tasks.
  #+BEGIN_SRC json
  "entries": {}
  #+END_SRC

* API
  :PROPERTIES:
  :header-args: :noweb-ref tasks-api
  :END:

** Fake data

   We need fake data to replace the state of tasks in server.
   We just generate 5 random tasks at startup.

   #+BEGIN_SRC js
   let FAKE_DATA =  R.pipe(
     R.times(() => {
       return {
         id: v4(),
         title: faker.lorem.words(),
         description: faker.lorem.sentences(),
       };
     }),
     R.map((entry) => {
       return [entry.id, entry];
     }),
     R.fromPairs
   )(5);
   #+END_SRC

** Fetch

   We simulate a request to the server with a 1s resolution delay.

   #+BEGIN_SRC js
   export function fetchTasks() {
     return new Promise((resolve) => {
       setTimeout(resolve, 1000);
     }).then(() => {
       return {
         entries: FAKE_DATA,
       };
     });
   }
   #+END_SRC

* Actions
  :PROPERTIES:
  :header-args: :noweb-ref tasks-actions
  :END:

** Fetch

   We set and clear the fetching flag before and after the request.
   TODO: handle request error.

   #+BEGIN_SRC js
   export function fetchTasks() {
     return (dispatch) => {
       dispatch({type: "TASKS_FETCH_ENTRIES"});
       return api.fetchTasks()
         .then(({entries}) => {
           dispatch({type: "TASKS_SET_ENTRIES", entries});
         });
     };
   }
   #+END_SRC

* Reducers
  :PROPERTIES:
  :header-args: :noweb-ref tasks-reducers
  :END:

** Fetch entries

   - set fetching flag.

   #+BEGIN_SRC js
   case "TASKS_FETCH_ENTRIES":
   {
     return R.assoc("fetching", true, state);
   }
   #+END_SRC

** Set entries

   - reset fetching flag.
   - set tasks entries state.

   #+BEGIN_SRC js
   case "TASKS_SET_ENTRIES":
   {
     return R.pipe(
       R.assoc("fetching", false),
       R.assoc("entries", entries)
     )(state);
   }
   #+END_SRC

* Components
  :PROPERTIES:
  :header-args: :noweb-ref tasks-components
  :END:

** Task

   We just render the task title in the list.

   #+BEGIN_SRC jsx
   const Task = ({title}) => (
     <tr>
       <td>{title}</td>
     </tr>
   );
   #+END_SRC

** Tasks List

   The tasks list is just a table.

   #+BEGIN_SRC jsx
   const TasksList = ({tasksList}) => (
     <Table bordered hover>
       <tbody>
         {R.map(([id, task]) => (
           <Task key={id} {...task}/>
         ), R.toPairs(tasksList))}
     </tbody>
       </Table>
   );
   #+END_SRC

** Tasks List container

   For now we only need the current tasks list.

   #+BEGIN_SRC js
   function mapStateToProps(state) {
     return {
       tasksList: getTasksList(state),
     };
   }

   const TasksListContainer = connect(
     mapStateToProps,
     actions
   )(TasksList);
   #+END_SRC

* Selectors
  :PROPERTIES:
  :header-args: :noweb-ref tasks-selectors
  :END:

** Tasks list

   Get the current tasks entries and convert to an array of tasks object.

   #+BEGIN_SRC js
   export const getTasksList = createSelector(
     R.path(["tasks", "entries"]),
     R.values
   );
   #+END_SRC

* Files :noexport:

** API

   #+BEGIN_SRC js :tangle ../src/api/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import faker from "faker";
   import {v4} from "node-uuid";

     <<tasks-api>>
   #+END_SRC

** Actions

   #+BEGIN_SRC js :tangle ../src/actions/tasks.js :noweb yes :mkdirp yes
   import * as api from "../api/tasks";

     <<tasks-actions>>
   #+END_SRC

** Reducers

   #+BEGIN_SRC js :tangle ../src/reducers/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";

   const DEFAULT_STATE = {
       <<tasks-default-state>>
   };

   export default function tasks(state = DEFAULT_STATE, {type, entries}) {
     switch(type) {
         <<tasks-reducers>>
     default: {}
     };
     return state;
   }
   #+END_SRC

** Selectors

   #+BEGIN_SRC js :tangle ../src/selectors/tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import {createSelector} from "reselect";

     <<tasks-selectors>>
   #+END_SRC

** Components

   #+BEGIN_SRC js :tangle ../src/components/Tasks.js :noweb yes :mkdirp yes
   import * as R from "ramda";
   import React from "react";
   import {connect} from "react-redux";
   import {Table} from "react-bootstrap";
   import actions from "../actions";
   import {getTasksList} from "../selectors/tasks";

     <<tasks-components>>

   export default TasksListContainer;
   #+END_SRC
